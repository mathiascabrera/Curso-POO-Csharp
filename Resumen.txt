" Curso de Programación Orientado a Objetos en C# "




----------------    Fundamentos de Programación Orientada a Objetos con C#    ----------------


Este es un curso base que nos servirá para poder tener los conocimientos para crear Aplicaciones en C# y en .NET.

Revisemos los 5 Conceptos más importantes en este paradigma de la Programación que veremos en el curso.

- " Clases y Objetos " : Éstos son los elementos base para poder programar en el paradigma de la programación orientado a objetos.

Las Clases nos ayudan a definir "propiedades" y "comportamientos" como una plantilla que podemos reutilizar para poder crear nuestros Objetos.


- " Encapsulamiento " : Relacionado a ocultar los valores reales o el detalle de los valores que poseen las propiedades o las características de nuestras clases.


- " Herencia " : Es la forma en la que podemos reutilizar código en la POO (programación orientado a objetos), podemos pasar las propiedades y los métodos que tenemos en una clase a otra.


- " Polimorfismo " : Posibilidad de definir diferentes comportamientos para el mismo método aceptando los mismos valores, parámetros y retornando el mismo tipo de datos pero definiendo diferentes tipos de comportamientos en diferentes clases.


- " Abstracción " : Es un concepto que nos permite omitir los detalles de las implementaciones que estamos realizando en nuestra clase. De esta manera podemos crear elementos mucho más genéricos que nos permiten reutilizar nuestro código para múltiples escenarios.














----------------    Prerrequisitos    ----------------

- Conocimientos de C# y .NET.
- .NET 7 o superior.
- Visual Studio Code o Visual Studio














----------------    ¿Qué es la programación orientada a objetos (POO)?    ----------------


¿Qué son los paradigmas de la Programación?.

Son formas o estilos en los que podemos programar y estructurar nuestro código.

La sintáxis del Lenguaje, cualquiera sea, está 100% relacionada al paradigma de la programación que estemos utilizando o que este Lenguaje utiliza mayormente.


Existen muchos paradigmas de la programación dentro del mercado de software y entre todos los lenguajes que existen actualmente.


Las librerías también podrían adoptar un lenguaje en particular e inclinarse en alguno de los paradigmas.



Algunos de los paradigmas más importantes son los siguientes:

- Programación Funcional.
- Programación Estructurada.
- Programación Reactiva.
- Programación Orientada a Aspectos.
- Programación Orientada a Objetos.


Es importante mencionar que C# es un Lenguaje Multi-Paradigma.

Esto significa que soporta múltiples estilos de programación.

No significa que tengamos que trabajar con un paradigma u otro, de hecho, en C# es común mezclar múltiples paradigmas cuando estamos estructurando nuestro código.

Sin embargo, la POO es uno de los paradigmas más importantes.
De hecho las mismas librerías, frameworks y los mismos templates o plantillas que existen dentro de .NET para crear diferentes tipos de proyectos, se basa en la POO.

En las últimas versiones de C# se ha potencializado mucho también el paradigma de la Programación Funcional, por ejemplo con ASP.NETCORE creando APIS.

Por lo que no está de más aprende sobre el paradigma de la Programación Funcional ya que posee mucha relevancia e importancia en C# y .NET.


CONCEPTO DE POO : Forma parte de la lista de las formas de programar, que vimos anteriormente, para estructurar nuestro código.

La cualidad de la POO es la de buscar extraer todos esos objetos que nos rodean a nuestro alrrededor en la vida real y poder materializarlos de alguna manera en el código, describirlos e implementarlos y de esta manera poder realizar esta abstracción entre la realidad y el código que estamos creando.

Los 2 componentes más importantes que veremos en este curso son las Clases y los Objetos.

Las Clases son las plantillas o estructuras que vamos a reutilizar para poder crear los Objetos.


La POO nos ayuda a reutilizar código.




La POO...

- Es un Paradigma de la Programación.

- Su objetivo es extraer elementos de la realidad a los algoritmos en nuestro código.

- Está basado en Clases y Objetos.














----------------    Creando tu primera Clase y Objeto    ----------------  


Abrimos Visual Studio y creamos un nuevo proyecto de consola (Console App).

Utilizamos .NET 7.0 que es la última versión al momento en que se tomó este curso.

Vamos a crear nuestra primera Clase y nuestro primer Objeto.














----------------    Concepto de Clases y Objetos    ---------------- 


Concepto de Clase :

- Elemento principal en POO.

- Se basa en propiedades que representan las características del Objeto y métodos que definen el comportamiento.

- Se pueden definir como la plantilla base para crear los Objetos.




Las Clases tienen propiedades (características), y métodos (son funciones pero dentro dentro de las clases, éstas definen el comportamiento de la clase, es decir, define lo que la Clase pueda realizar)




Los Objetos son instancias de las Clases.
Son instancias ya que los Objetos quedan haciendo siempre referencia a la Clase a partir de la que se crearon.

El Objeto es la particularidad de la Clase, es decir, toma todas las propiedades, los métodos y todo lo que se configuró en la Clase, pero los valores pueden alterarse y ser particulares para cada Objeto.

Entonces, utilizamos a la Clase como un molde, como una plantilla y el Objeto es aquel que cambia los valores de esos contenidos de la Clase.


Los Objetos se usan para guardar datos o ejecutar acciones que define la clase.














----------------    Creando Clases y Propiedades    ---------------- 


Vamos a Visual Studio a crear la Clase SuperHeroe que nos permitirá crear cualquier super héroe.

Recordemos que los nombres de las clases debe ser en singular.

La propiedad Id de la clase podría ser de tipo Guid también.














----------------    Creando Clases Complejas    ----------------


Vamos para nuestro IDE.

Tenemos la propiedad de SuperPoderes, en donde tenemos una lista de strings. Pero para estos Super Poderes podríamos tener una descripción de lo que realiza ese superpoder y también asignarle un nivel para determinar qué tan importante es el superpoder.

Sumado a esto también tener la posibilidad de reutilizar estos superpoderes, ya que por ejemplo muchos superhéroes pueden volar, pueden hacerse invisibles, etcétera.


Para lo cual, frente a este escenario, podríamos crear una Clase para poder crear Objetos de tipo "SuperPoder", permitiéndonos tener mayor información y posibilitándonos a reutilizar código.


Entonces creamos una nueva clase llamada "SuperPoder" y podríamos asignar las siguientes propiedades: Nombre, Descripción y Nivel de qué tan útil es el poder.

En el caso del Nivel podría ser un int por ejemplo de 0 a 5, en donde el 5 podría ser el poder más útil y el 0 el más simple.

No obstante, podríamos utilizar una estructura más compleja, la enumeración.

Las Enumeraciones (ENUM) nos permiten crear una lista de valores y forzar al Desarrollador que esté utilizando la Clase a utilizar cualquiera de estos valores, pero no otros.

En VS podemos apreciar su implementación.

Una vez creada la clase "SuperPoder", procedemos a crear los Objetos de "SuperPoder" y luego reutilizar estos SuperPoderes en los SuperHeroes que necesitemos.

Luego, en vez de tener una lista de Strings de SuperPoderes en la clase "SuperHeroe", vamos a tener una lista del tipo de "SuperPoder".

La "List<T>" se conoce como el tipo genérico. Es una Lista que recibe cualquier tipo de datos ya sea primitivo o creado por el Desarrollador.

Entonces, antes de agregar los SuperPoderes a nuestros SuperHeroes, debemos crear primeramente una Lista de SuperPoderes, y finalmente esta Lista agregar a nuestros SuperHeroes.



Ahora podemos crear mútiples poderes que luego las podemos reutilizar.

Los SuperPoderes las debemos crear al principio del código para que queden de manera general, y luego ir asignandole a la Lista de poderes de cada superheroe esos poderes.

De esta manera construímos diferentes objetos mucho más complejos pero mucho mejor estructurados y sobre todo reutilizando los SuperPoderes.














----------------    Constructor y datos iniciales en una clase    ----------------

El Constructor nos ayuda a inicializar los valores de un objeto que son creados a partir de una Clase.
Es una función que nos ayuda a inicializar los valores o especificar datos por defecto al momento de crear nuestros Objetos. 

La forma de crear los Constructor varían según el Lenguaje. No obstante, para C#, no retorna ningún valor y su nombre debe ser exactamente el mismo nombre de la Clase.

Con el Constructor podemos inicializar todas las variables y también ejecutar rutinas por defecto que necesitemos para cada uno de los Objetos que estemos creando.

Vayamos a Visual Studio para crear nuestro Constructor.














----------------    Métodos dentro de una Clase    ----------------

Crearemos Métodos (funciones que realizan una acción y que se encuentran dentro de las Clases), que nos ayuden a definir los comportamientos de nuestros Objetos.

¡Vayamos a Visual Studio a realizarlo!.














----------------    Tipos Registro y Estructura    ----------------

Estos tipos tienen mucha relevancia y particularidades que nos permiten utilizarlos en escenarios muy puntuales.


TABLAS COMPARATIVA entre los tipos Clase, Estructura y Registro.

CLASE							ESTRUCTURA				REGISTRO
Referencia						Valor					Valor o referencia
Grandes						Pequeñas				Pequeñas
Valores y Comportamientos			Enfocada a valores		Enfocada a valores inmutables


Podemos observar las diferencias entre los Tipos Clase, Estructura y Registro.

Las Clases ya las conocemos, una de las particularidades es que la forma en la que se crean o se comparan los elementos dentro del código es a través de Referencias. Esto significa que cada vez que creemos un objeto con esa clase se va a partar una posición de memoria para almacenar los datos de ese Objeto y se le va a asignar un identificador a esa posición de memoria, a ese bloque de memoria que se apartó para ese Objeto en particular.

Esto significa que si creamos otro objeto con las mismas características, es decir, exactamente con los mismos valores, de todas maneras va a ser un Objeto diferente al primer Objeto que creamos, ya que cada uno de estos va a tener una referencia diferente.


En este aspecto podemos mencionar que las Estructuras y los Registros funcionan diferentes ya que éstos se enfocan más en Valores, o realizar comparativas mediante valores.

Si tuviéramos dos Objetos con los mismos datos, en el caso de las Estructuras y Registros, van a ser exactamente los mismos Objetos.



Las Clases se pueden utilizar en cualquier nivel de complejidad, cuando tengamos componentes pequeños medianos o grandes podemos emplear Clases.

Sin embargo, las Estructuras y los Registros también pueden crecer pero no son buenos para los medianos y grandes componentes. Generalmente se tienen que crear objetos muy pequeños que se enfocan en valores como hemos visto anteriormente.

Entonces si tenemos un objeto que posee 5 propiedades queremos almacenar datos ahí y luego compararlos a nivel de valor entonces las estructuras y los registros son una gran opción.


También podemos resaltar que las Clases son enfocadas en Valores y Comportamientos, es decir, cuando tenemos que crear datos pero también tenemos que crear muchos métodos o funciones dentro de la clase para poder manipular esos datos dentro de la Clase.

No obstante, las Estructuras son enfocadas en Valores y los Registros enfocados en Valores Inmutables (que no cambian en el tiempo, vamos a instanciarlos a crearlos a asignarles un valor y este valor no va a cambiar durante el tiempo).


De esta manera vemos que cada uno de estos tipos tienen su particularidad y su forma de utilizarlo.



Vayamos a Visual Studio y realicemos una comparativa y entendamos porqué es tan importante utilizar los tipos Registros y los tipos Records en ciertos escenarios.


Hemos realizado la siguiente prueba en VS :

Console.WriteLine("Comparación de dos Objetos de Clase: "+Convert.ToString(superman == superman2));

Console.WriteLine("Comparación de dos Objetos de tipo Record: "+Convert.ToString(superHeroeRecord == superHeroeRecord2));

A pesar de tener los mismos valores, en la COMPARACIÓN de Objetos de CLASES el resultado fue FALSE, mientras que en la COMPARACIÓN de Objetos RECORDS lo que devolvió fue TRUE.

Cuando estamos trabajando con Microservicios y tenemos que recibir múltiples mensajes de otros servicios y queremos comparalos para saber que son iguales los tipo Records son extremadamente útiles ya que manualmente no tengo que revisar propiedad por propiedad si los objetos son iguales o no para poder compararlos, simplemente utilizamos el tipo Record.


También podemos crear un Tipo Struct.



Información adicional:

RECORD En C#, un "record" es un tipo de referencia inmutable introducido en C# 9.0 que se utiliza para modelar datos simples y valores inmutables. Los "records" son especialmente útiles cuando tienes un conjunto de datos que no cambia después de su creación y deseas garantizar que no se pueda modificar. Algunas de las ventajas y casos de uso comunes de los "records" incluyen:

Inmutabilidad: Los "records" son inmutables de forma predeterminada, lo que significa que sus valores no pueden cambiar después de que se hayan creado. Esto garantiza que los datos permanezcan consistentes y predecibles.

Facilidad de Igualdad: Los "records" facilitan la comparación de igualdad de objetos basándose en sus valores en lugar de sus referencias. Esto es útil al realizar comparaciones de igualdad en lugar de referencia.

Sintaxis Concisa: Los "records" tienen una sintaxis concisa para definir propiedades y métodos. Puedes definir propiedades de solo lectura de manera abreviada.

Desestructuración: Los "records" admiten la desestructuración, lo que significa que puedes descomponer un objeto "record" en sus componentes individuales.

Patrones de Coincidencia: Los "records" funcionan bien con patrones de coincidencia, lo que facilita la escritura de código que responde a diferentes combinaciones de valores de objetos "record".

Usos Comunes: Los "records" son ideales para modelar tipos de datos simples como puntos, vectores, coordenadas geográficas, datos de sensores y otros valores inmutables.














----------------    Modificadores de acceso    ----------------

"Quiénes tienen accesos a las clases, propiedades y métodos".

Lista de Modificadores de Acceso más utilizados en C#, aunque existen otros más :

- public

- protected

- internal

- private

- file


"public" y "private" son los más importantes, en cuanto a porcentajes de uso.

Con el private evitamos que cualquiera que esté fuera del contexto de nuestra Clase pueda utilizar ese método o esa propiedad. El acceso está limitado al tipo contenedor.

Con public sucede lo contrario, se expone la propiedad o el método que esté dentro de la clase, para que sea utilizado por cualquiera que esté creando Objetos con nuestra Clase. El Acceso no está restringido.

Con protected el acceso está limitado a la clase contenedora o a los tipos derivados de la clase contenedora. No así fuera de la clase.

Con internal el acceso esta limitado al ensamblado actual.

Con protected internal (se combinan ambas), el acceso está limitado al ensamblado actual o a los tipos derivados de la clase contenedora. Posee ambas limitaciones.

Con private protected (combinación de ambas), el acceso está limitado a la clase contenedora o a los tipos derivados de la clase contenedora que hay en el ensamblado actual.


Vayamos a Visual Studio y pongamos en práctica los modificadores de acceso.


Vamos ordenar nuestro código. Todas las Clases deben poseer un archivo por lo que crearemos un archivo para cada clase que tengamos en nuestro proyecto.

Por defecto las clases se crean con el modificador de acceso Internal.

A las clases las podemos definir como Internal o Public, luego ya podemos jugar con el "namespace" para determinar en dónde la queremos utilizar.





En la próxima clase aprenderemos acerca del concepto de Encapsulamiento.
Haremos uso de los modificadores de acceso para ocultar y mostrar propiedades que tengamos dentro de la clase.














----------------    Encapsulamiento    ----------------

Encapsulamiento:
Se refiere a la idea de ocultar los detalles internos de un objeto y proporcionar una interfaz pública bien definida para interactuar con él.

El encapsulamiento permite controlar el acceso a los atributos y métodos de un objeto, lo que ayuda a mantener la integridad de los datos y facilita la gestión y el mantenimiento del código.

En el encapsulamiento, los atributos de un objeto se declaran como privados, lo que significa que solo pueden accederse y modificarse desde dentro de la propia clase a la que pertenece el objeto.

Para permitir que otros objetos interactúen con estos atributos, se proporcionan métodos públicos, también conocidos como métodos de acceso o getters y setters, que permiten obtener y establecer los valores de los atributos de manera controlada.

Los beneficios del encapsulamiento son:

Control de acceso: Se puede especificar quién tiene acceso a los datos y quién no. Esto ayuda a prevenir modificaciones no deseadas o inconsistentes en los datos.
Ocultamiento de detalles internos: Los detalles de implementación de una clase se mantienen ocultos, lo que facilita el cambio de la implementación sin afectar a los objetos que la utilizan.
Facilita la mantenibilidad: Al tener una interfaz pública bien definida, es más fácil identificar y corregir problemas en el código, ya que se sabe dónde se realizan las interacciones con el objeto.
En C# el encapsulamiento se logra utilizando modificadores de acceso como "private", "public" y "protected" para controlar el acceso a los atributos y métodos de una clase.




Vamos para visual studio para comprender este concepto.



Supongamos que :

superman.Nombre = "    SuperMan   ";//El cliente agrega mal la información.

Se recibe un string con espacios, algo que es muy común, al ejecutar el código esta información se va a mostrar con esos espacios.


Lo que vamos a realizar es encapsular la propiedad de Nombre y vamos a eliminar todos esos caracteres para modificar el valor recibido.
Esta es una de las cualidades o de los casos en los que podemos utilizar el Encapsulamiento.

Debemos tener dos propiedades de Nombre, una publica y otra privada.



De esta manera encapsulamos la propiedad "Nombre" en la clase SuperHeroe para almacenar un nombre diferente en la propiedad privada _Nombre al momento en el que se realiza la asignación.

public string Nombre
{ get
    {
        return _Nombre;
    }
    set
    {
        _Nombre = value.Trim();//El método trim elimina los espacios del principio y del final de la cadena.
    }
}



Ahora vamos a realizar otro tipo de encapsulamiento.

Crearemos una propiedad que sea de solo lectura y tenga un get.

public string NombreIdentidadSecreta
{
    get
    {
        return $"{_Nombre} ({IdentidadSecreta})";
    }
}



Esta nueva propiedad la vamos a utilizar en nuestro método UsarSuperPoderes().


Este es otro tipo de encapsulamiento, lo que estamos haciendo es reutilizar las clases que ya tienen la clase, las transformamos, creamos una nueva propiedad que encapsula un comportamiento en particular, en este el comportamiento es pegar el nombre con la identidad secreta.

El encapsulamiento se puede utilizar bajo estos escenarios en los que se desea realizar una transformación o manipulación de los valores de las propiedades o queremos crear una nueva propiedad en la que se encapsule un comportamiento en particular.


Microsoft Define "Encapsulación" como:

ocultar el estado interno y la funcionalidad de un objeto y permitir solo el acceso a través de un conjunto público de funciones.

Gran ejemplo en la clase con los get; y set;














----------------    Herencia    ----------------

Nos remitimos al concepto de las clases, recordemos que las clases son los componentes bases para la POO.

La herencia permite que una Clase herede atributos y métodos de otra clase. es una forma de reutilizar el código para así, establecer relaciones entre las clases.

Al tener Propiedades y Métodos en una Clase, éstas van a pasar a la Clase Hija, que está heredando sus características.

Al aplicar Herencia, estamos reutilizando código.

Sintáxis en C# para aplicar Herencia:

public class ClaseHija : ClasePadre{}


En C# solo podemos heredar de una sola Clase.













----------------    Usando Herencia en C#    ----------------

Los Antihéroes también son Superhéroes, tienen súper poderes, identidad secreta.

La particularidad de ellos es que pueden cometer crímenes o realizar acciones que estén fuera de la ley siempre y cuando con esto puedan cumplir su misión generando la paz en la Tierra. Esta es la diferencia respecto a los Superhéroes .

Los Superhéroes, no obstante, realizan todo acorde a la ley para lograr sus objetivos.

Lo que vamos a hacer es crear una nueva clase "Antihéroe" que herede de Superhéroe, para poder reutilizar todo lo que ya tengamos de Superheroe, pero agregando esos comportamientos nuevos a los Antihéroes.

Vamos para Visual Studio y apliquemos esto.













----------------    Abstracción    ----------------

Buscamos Componentes más Genéricos que no contengan un detalle o una definición.

Esto nos permite reutilizar aún más nuestro código y también aplicar conceptos avanzados como lo son los Patrones de Diseño.

Vamos a nuestro código y apliquémoslo.

No podemos tener un método abstracto en una Clase que no sea Abstracta.

Los métodos abstractos son aquellos que no tienen definido su lógica o su comportamiento.

Al implementar una clase abstracta y utilizar sus métodos debemos hacer uso de la palabra reservada Override.

En las Clases Abstractas también podemos emplear propiedades y métodos con comportamientos, es decir, que no sean abstractas.



¿Qué diferencia hay entre una Clase Abstracta y una Interfaz, y cuándo conviene usar una o la otra?.

Al ser una clase, solo puede heredar de una y nada mas, con las interfaces puedes implementar varias e ir incrementando la lógica de acuerdo a los requerimientos del cliente. Una clase abstracta puede tener métodos implementados, una interfaz antes no podía hacerlo pero desde la versión C# 9. ya podemos hacerlo utilizando la nueva funcionalidad de Métodos por defecto en interfaces. Lo ideal es utilizar la mayor parte del tiempo Interfaces tanto para estructurar nuestro código en general como para también aplicar patrones de diseño.













----------------    Polimorfismo    ----------------

¿Qué sucede si ya tenemos un método implementado en la Clase Padre pero queremos que se comporte de manera diferente en la Sub-Clase?.

Vamos al código.

Diferencias entre polimorfismo y sobrecarga:
Esto puede parecer un poco confuso pero en definitiva el Polimorfismo consiste en redefinir un método de una clase padre en una clase hija. Mientras que la sobrecarga es definir un nuevo método igual que otro viejo, pero cambiando el tipo o la cantidad de parámetros.













----------------    ¿Qué son las Interfaces?    ----------------

- Es un contrato para garantizar la estructura de una clase, de tal manera que esta misma estructura la podamos utilizar en diferentes partes de nuestro código.
Allí podemos crear propiedades, métodos, definir qué es lo que retornan estos métodos, pero no implementamos los métodos.

- Permite elementos abstractos e implementaciones por defecto.

- Ayudan a descoplar el código. Es decir, evitar que las partes de nuestro código, componentes, librerías no dependan una de la otra, sino que dependan de componentes abstractos

- C# soporta implementaciones de múltiples interfaces.


Con el uso de las Interfaces podemos extender fácilmente nuestro código.


Las Interfaces están altamente relacionadas con los Principios SOLID (Interfaces Segregation Principle).


CARACTERÍSTICAS GENERALES DE LAS INTERFACES:

- Normalmente se declaran con la letra I al inicio del nombre.

- Se utilizan en casi todos los patrones de diseños.

- Podemos implementar generics para utilizar la misma Interfaz en diferentes escenarios. Ejemplo : IList<T>



Las diferencias principales entre las interfaces y las clases son:

Las interfaces no pueden tener instancias. Una interfaz solo puede ser implementada por un tipo de datos.
Las interfaces solo pueden definir métodos, propiedades y eventos. Las clases pueden definir datos de instancia, métodos, propiedades y eventos.
Las interfaces se utilizan para especificar el comportamiento. Las clases se utilizan para definir tipos de datos.