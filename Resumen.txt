" Curso de Programación Orientado a Objetos en C# "




----------------    Fundamentos de Programación Orientada a Objetos con C#    ----------------


Este es un curso base que nos servirá para poder tener los conocimientos para crear Aplicaciones en C# y en .NET.

Revisemos los 5 Conceptos más importantes en este paradigma de la Programación que veremos en el curso.

- " Clases y Objetos " : Éstos son los elementos base para poder programar en el paradigma de la programación orientado a objetos.

Las Clases nos ayudan a definir "propiedades" y "comportamientos" como una plantilla que podemos reutilizar para poder crear nuestros Objetos.


- " Encapsulamiento " : Relacionado a ocultar los valores reales o el detalle de los valores que poseen las propiedades o las características de nuestras clases.


- " Herencia " : Es la forma en la que podemos reutilizar código en la POO (programación orientado a objetos), podemos pasar las propiedades y los métodos que tenemos en una clase a otra.


- " Polimorfismo " : Posibilidad de definir diferentes comportamientos para el mismo método aceptando los mismos valores, parámetros y retornando el mismo tipo de datos pero definiendo diferentes tipos de comportamientos en diferentes clases.


- " Abstracción " : Es un concepto que nos permite omitir los detalles de las implementaciones que estamos realizando en nuestra clase. De esta manera podemos crear elementos mucho más genéricos que nos permiten reutilizar nuestro código para múltiples escenarios.














----------------    Prerrequisitos    ----------------

- Conocimientos de C# y .NET.
- .NET 7 o superior.
- Visual Studio Code o Visual Studio














----------------    ¿Qué es la programación orientada a objetos (POO)?    ----------------


¿Qué son los paradigmas de la Programación?.

Son formas o estilos en los que podemos programar y estructurar nuestro código.

La sintáxis del Lenguaje, cualquiera sea, está 100% relacionada al paradigma de la programación que estemos utilizando o que este Lenguaje utiliza mayormente.


Existen muchos paradigmas de la programación dentro del mercado de software y entre todos los lenguajes que existen actualmente.


Las librerías también podrían adoptar un lenguaje en particular e inclinarse en alguno de los paradigmas.



Algunos de los paradigmas más importantes son los siguientes:

- Programación Funcional.
- Programación Estructurada.
- Programación Reactiva.
- Programación Orientada a Aspectos.
- Programación Orientada a Objetos.


Es importante mencionar que C# es un Lenguaje Multi-Paradigma.

Esto significa que soporta múltiples estilos de programación.

No significa que tengamos que trabajar con un paradigma u otro, de hecho, en C# es común mezclar múltiples paradigmas cuando estamos estructurando nuestro código.

Sin embargo, la POO es uno de los paradigmas más importantes.
De hecho las mismas librerías, frameworks y los mismos templates o plantillas que existen dentro de .NET para crear diferentes tipos de proyectos, se basa en la POO.

En las últimas versiones de C# se ha potencializado mucho también el paradigma de la Programación Funcional, por ejemplo con ASP.NETCORE creando APIS.

Por lo que no está de más aprende sobre el paradigma de la Programación Funcional ya que posee mucha relevancia e importancia en C# y .NET.


CONCEPTO DE POO : Forma parte de la lista de las formas de programar, que vimos anteriormente, para estructurar nuestro código.

La cualidad de la POO es la de buscar extraer todos esos objetos que nos rodean a nuestro alrrededor en la vida real y poder materializarlos de alguna manera en el código, describirlos e implementarlos y de esta manera poder realizar esta abstracción entre la realidad y el código que estamos creando.

Los 2 componentes más importantes que veremos en este curso son las Clases y los Objetos.

Las Clases son las plantillas o estructuras que vamos a reutilizar para poder crear los Objetos.


La POO nos ayuda a reutilizar código.




La POO...

- Es un Paradigma de la Programación.

- Su objetivo es extraer elementos de la realidad a los algoritmos en nuestro código.

- Está basado en Clases y Objetos.














----------------    Creando tu primera Clase y Objeto    ----------------  


Abrimos Visual Studio y creamos un nuevo proyecto de consola (Console App).

Utilizamos .NET 7.0 que es la última versión al momento en que se tomó este curso.

Vamos a crear nuestra primera Clase y nuestro primer Objeto.














----------------    Concepto de Clases y Objetos    ---------------- 


Concepto de Clase :

- Elemento principal en POO.

- Se basa en propiedades que representan las características del Objeto y métodos que definen el comportamiento.

- Se pueden definir como la plantilla base para crear los Objetos.




Las Clases tienen propiedades (características), y métodos (son funciones pero dentro dentro de las clases, éstas definen el comportamiento de la clase, es decir, define lo que la Clase pueda realizar)




Los Objetos son instancias de las Clases.
Son instancias ya que los Objetos quedan haciendo siempre referencia a la Clase a partir de la que se crearon.

El Objeto es la particularidad de la Clase, es decir, toma todas las propiedades, los métodos y todo lo que se configuró en la Clase, pero los valores pueden alterarse y ser particulares para cada Objeto.

Entonces, utilizamos a la Clase como un molde, como una plantilla y el Objeto es aquel que cambia los valores de esos contenidos de la Clase.


Los Objetos se usan para guardar datos o ejecutar acciones que define la clase.














----------------    Creando Clases y Propiedades    ---------------- 


Vamos a Visual Studio a crear la Clase SuperHeroe que nos permitirá crear cualquier super héroe.

Recordemos que los nombres de las clases debe ser en singular.

La propiedad Id de la clase podría ser de tipo Guid también.














----------------    Creando Clases Complejas    ----------------


Vamos para nuestro IDE.

Tenemos la propiedad de SuperPoderes, en donde tenemos una lista de strings. Pero para estos Super Poderes podríamos tener una descripción de lo que realiza ese superpoder y también asignarle un nivel para determinar qué tan importante es el superpoder.

Sumado a esto también tener la posibilidad de reutilizar estos superpoderes, ya que por ejemplo muchos superhéroes pueden volar, pueden hacerse invisibles, etcétera.


Para lo cual, frente a este escenario, podríamos crear una Clase para poder crear Objetos de tipo "SuperPoder", permitiéndonos tener mayor información y posibilitándonos a reutilizar código.


Entonces creamos una nueva clase llamada "SuperPoder" y podríamos asignar las siguientes propiedades: Nombre, Descripción y Nivel de qué tan útil es el poder.

En el caso del Nivel podría ser un int por ejemplo de 0 a 5, en donde el 5 podría ser el poder más útil y el 0 el más simple.

No obstante, podríamos utilizar una estructura más compleja, la enumeración.

Las Enumeraciones (ENUM) nos permiten crear una lista de valores y forzar al Desarrollador que esté utilizando la Clase a utilizar cualquiera de estos valores, pero no otros.

En VS podemos apreciar su implementación.

Una vez creada la clase "SuperPoder", procedemos a crear los Objetos de "SuperPoder" y luego reutilizar estos SuperPoderes en los SuperHeroes que necesitemos.

Luego, en vez de tener una lista de Strings de SuperPoderes en la clase "SuperHeroe", vamos a tener una lista del tipo de "SuperPoder".

La "List<T>" se conoce como el tipo genérico. Es una Lista que recibe cualquier tipo de datos ya sea primitivo o creado por el Desarrollador.

Entonces, antes de agregar los SuperPoderes a nuestros SuperHeroes, debemos crear primeramente una Lista de SuperPoderes, y finalmente esta Lista agregar a nuestros SuperHeroes.



Ahora podemos crear mútiples poderes que luego las podemos reutilizar.

Los SuperPoderes las debemos crear al principio del código para que queden de manera general, y luego ir asignandole a la Lista de poderes de cada superheroe esos poderes.

De esta manera construímos diferentes objetos mucho más complejos pero mucho mejor estructurados y sobre todo reutilizando los SuperPoderes.














----------------    Constructor y datos iniciales en una clase    ----------------

El Constructor nos ayuda a inicializar los valores de un objeto que son creados a partir de una Clase.
Es una función que nos ayuda a inicializar los valores o especificar datos por defecto al momento de crear nuestros Objetos. 

La forma de crear los Constructor varían según el Lenguaje. No obstante, para C#, no retorna ningún valor y su nombre debe ser exactamente el mismo nombre de la Clase.

Con el Constructor podemos inicializar todas las variables y también ejecutar rutinas por defecto que necesitemos para cada uno de los Objetos que estemos creando.

Vayamos a Visual Studio para crear nuestro Constructor.














----------------    Métodos dentro de una Clase    ----------------

Crearemos Métodos (funciones que realizan una acción y que se encuentran dentro de las Clases), que nos ayuden a definir los comportamientos de nuestros Objetos.

¡Vayamos a Visual Studio a realizarlo!.


















































